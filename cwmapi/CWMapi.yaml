openapi: 3.0.1
info:
  title: CWMAPI
  description: Post/read questions, answers, and comments
  version: 1.0.0
servers:
- url: http://34.208.28.95:3000/msgstore/v1
paths:
  /spaces:
    get:
      summary: Gets all spaces
      description: Returns a list containing all spaces.
      responses:
        200:
          description: A list of spaces
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Space'
  /space/{spaceId}:
    get:
      summary: Gets all spaces
      description: Returns a list containing all spaces.
      parameters:
      - name: spaceId
        in: path
        description: Object ID of the space to get.
        required: true
        schema:
          type: string
      - name: depth
        in: query
        description: 0 = no nesting, 1 = 1st order nesting, etc.  -1 for all levels.
        required: false
        schema:
          type: integer      
      responses:
        200:
          description: One Space
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Space'
  /questions/{spaceId}:
    get:
      summary: Gets all questions for a space
      parameters:
      - name: spaceId
        in: path
        description: Object ID of the space to get questions.
        required: true
        schema:
          type: string
      - name: depth
        in: query
        description: 0 = no nesting, 1 = 1st order nesting, etc.  -1 for all levels.
        required: false
        schema:
          type: integer
      responses:
        200:
          description: A list of questions for a space
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
  /question/{questionId}:
    get:
      summary: Gets one question
      parameters:
      - name: questionId
        in: path
        description: Object ID of the question.
        required: true
        schema:
          type: string
      - name: depth
        in: query
        description: 0 = no nesting, 1 = 1st order nesting, etc.  -1 for all levels.
        required: false
        schema:
          type: integer 
      responses:
        200:
          description: A question
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Question'
  /answers/{questionId}:
    get:
      summary: Gets all answers for a question
      parameters:
      - name: questionId
        in: path
        description: Object ID of the question to get answers.
        required: true
        schema:
          type: string
      - name: depth
        in: query
        description: 0 = no nesting, 1 = 1st order nesting, etc.  -1 for all levels.
        required: false
        schema:
          type: integer
      responses:
        200:
          description: A list of answers for a question
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Answer'
  /answer/{answerId}:
    get:
      summary: Gets one answer
      parameters:
      - name: answerId
        in: path
        description: Object ID of the answer.
        required: true
        schema:
          type: string
      - name: depth
        in: query
        description: 0 = no nesting, 1 = 1st order nesting, etc.  -1 for all levels.
        required: false
        schema:
          type: integer
      responses:
        200:
          description: An answer
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Answer'
  /comments/{answerId}:
    get:
      summary: Gets all top-level comments for an answer
      parameters:
      - name: answerId
        in: path
        description: Object ID of the answer to get comments.
        required: true
        schema:
          type: string
      - name: depth
        in: query
        description: 0 = no nesting, 1 = 1st order nesting, etc.  -1 for all levels.
        required: false
        schema:
          type: integer
      responses:
        200:
          description: A list of coments for an answer
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
  /comment/{commentId}:
    get:
      summary: Gets one answer
      parameters:
      - name: commentId
        in: path
        description: Object ID of the coment.
        required: true
        schema:
          type: string
      - name: depth
        in: query
        description: 0 = no nesting, 1 = 1st order nesting, etc.  -1 for all levels.
        required: false
        schema:
          type: integer
      responses:
        200:
          description: A comment
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Comment'
  /objectid:
    get:
      summary: gets new object ids
      responses:
        200:
          description: new object ids
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectId'
components:
  schemas:
    Space:
      required:
      - _id
      - createdOn
      - description
      - title
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        createdOn:
          type: string
          format: date-time
        description:
          type: string
        tags:
          type: array
          items:
            required:
            - tag
            type: object
            properties:
              tag:
                type: string
        questions:
          type: array
          items:
            required:
            - questions
            type: object
            properties:
              questions:
                $ref: '#/components/schemas/Question'
        
    Answer:
      required:
      - _id
      - body
      - createdBy
      - createdOn
      type: object
      properties:
        _id:
          type: string
        spaceId:
          type: string
        body:
          type: string
        createdOn:
          type: string
          format: date-time
        createdBy:
          type: string
        comments:
          type: array
          items:
            required:
            - comments
            type: object
            properties:
              replies:
                $ref: '#/components/schemas/Comment'
    Comment:
      required:
      - _id
      - answerId
      - body
      - createdBy
      - createdOn
      type: object
      properties:
        _id:
          type: string
        answerId:
          type: string
        parentCommentId:
          type: string
          description: The parent comment is for comment trees.  For first-gen comment,
            the parent is answer, and there is no parent comment.
        body:
          type: string
        createdOn:
          type: string
          format: date-time
        createdBy:
          type: string
        replies:
          type: array
          items:
            required:
            - replies
            type: object
            properties:
              replies:
                $ref: '#/components/schemas/Comment'
    ObjectId:
      required:
      - _id
      type: object
      properties:
        _id:
          type: string
    Question:
      required:
      - _id
      - body
      - createdBy
      - createdOn
      - spaceId
      type: object
      properties:
        _id:
          type: string
        spaceId:
          type: string
        body:
          type: string
        createdOn:
          type: string
          format: date-time
        createdBy:
          type: string
        answers:
          type: array
          items:
            required:
            - answers
            type: object
            properties:
              answers:
                $ref: '#/components/schemas/Answer'
