openapi: 3.0.1
info:
  title: CWMAPI
  description: Post/read questions, answers, and comments
  version: 1.0.0
servers:
- url: http://34.208.28.95:3000/msgstore/v1
paths:
  /spaces:
    get:
      summary: Gets one or more spaces
      description: Returns a list containing one or more spaces.
      parameters:
      - name: spaceId
        in: query
        description: One (comma-separated) object ID for each space to get.  If empty, all spaces will be retrieved
        required: false
        schema:
          type: string
      - name: depth
        in: query
        description: 0 = no nesting, 1 = 1st order nesting, etc.  -1 for all levels.
        required: false
        schema:
          type: integer      
      responses:
        200:
          description: A list of spaces
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Space'
                  

  /questions:
    get:
      summary: Gets 0 or more questions based on query
      parameters:
      - name: spaceId
        in: query
        description: one or more (coma-separated) space _id.  If set, only questions from specified spaceId(s) will be returned
        required: false
        schema:
          type: string
      - name: questionId
        in: query
        description: One or more (comma-separated) question _id as a filter for questions, for each space to get.  If empty, all questions will be retrieved, based on the value if spaceId
        required: false
        schema:
          type: string

      - name: depth
        in: query
        description: 0 = no nesting, 1 = 1st order nesting, etc.  -1 for all levels.
        required: false
        schema:
          type: integer
      responses:
        200:
          description: A list of questions for a space
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'

  /answers:
    get:
      summary: Gets one or more answers
      parameters:
      - name: questionId
        in: query
        description: one or more (coma-separated) question _id.  If set, only answers from specified questioId(s) will be returned
        required: true
        schema:
          type: string
      - name: answerId
        in: query
        description: One or more (comma-separated) answer _id as a filter for answers, for each question to get.  If empty, all answers will be retrieved, based on the value if questionId
        required: false
        schema:
          type: string
      - name: depth
        in: query
        description: 0 = no nesting, 1 = 1st order nesting, etc.  -1 for all levels.
        required: false
        schema:
          type: integer
      responses:
        200:
          description: A list of answers for a question
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Answer'

  /comments:
    get:
      summary: Gets all top-level comments for an answer
      parameters:
      - name: answerId
        in: query
        description: one or more (coma-separated) answer _id.  If set, only coments from specified answer(s) will be returned
        required: true
        schema:
          type: string
      - name: commentId
        in: query
        description: One or more (comma-separated) comment _id as a filter for comments to get.  If empty, all commments will be retrieved, based on the value of answerId
        required: false
        schema:
          type: string
      - name: depth
        in: query
        description: 0 = no nesting, 1 = 1st order nesting, etc.  -1 for all levels.
        required: false
        schema:
          type: integer
      responses:
        200:
          description: A list of coments for an answer
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
 
components:
  schemas:
    Space:
      required:
      - _id
      - createdOn
      - description
      - title
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        createdOn:
          type: string
          format: date-time
        description:
          type: string
        tags:
          type: array
          items:
            required:
            - tag
            type: object
            properties:
              tag:
                type: string
        questions:
          type: array
          items:
            required:
            - questions
            type: object
            properties:
              questions:
                $ref: '#/components/schemas/Question'
        
    Answer:
      required:
      - _id
      - body
      - createdBy
      - createdOn
      type: object
      properties:
        _id:
          type: string
        spaceId:
          type: string
        body:
          type: string
        createdOn:
          type: string
          format: date-time
        createdBy:
          type: string
        comments:
          type: array
          items:
            required:
            - comments
            type: object
            properties:
              replies:
                $ref: '#/components/schemas/Comment'
    Comment:
      required:
      - _id
      - answerId
      - body
      - createdBy
      - createdOn
      type: object
      properties:
        _id:
          type: string
        answerId:
          type: string
        parentCommentId:
          type: string
          description: The parent comment is for comment trees.  For first-gen comment,
            the parent is answer, and there is no parent comment.
        body:
          type: string
        createdOn:
          type: string
          format: date-time
        createdBy:
          type: string
        replies:
          type: array
          items:
            required:
            - replies
            type: object
            properties:
              replies:
                $ref: '#/components/schemas/Comment'

    Question:
      required:
      - _id
      - body
      - createdBy
      - createdOn
      - spaceId
      type: object
      properties:
        _id:
          type: string
        spaceId:
          type: string
        body:
          type: string
        createdOn:
          type: string
          format: date-time
        createdBy:
          type: string
        answers:
          type: array
          items:
            required:
            - answers
            type: object
            properties:
              answers:
                $ref: '#/components/schemas/Answer'
