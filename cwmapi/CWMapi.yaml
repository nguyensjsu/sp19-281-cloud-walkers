openapi: 3.0.1
info:
  title: CWMAPI
  description: Post/read questions, answers, and comments
  version: 1.0.0
servers:
- url: http://34.208.28.95:3000/msgstore/v1
paths:
                  

  /topics:
    get:
      parameters:
      - name: Authorization
        in: path
        description: JWT token containing the user ID.  
        required: true
        schema:
          type: string
        
      summary: All the topics in the system
      
      operationId: getTopics    
      responses:
        200:
          description: Array of topics
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'
        401:
          description: Invalid JWT token
          content:
            text/plain:
              schema:
                type: string          
  
  /questions:
    get:
      summary: Gets 0 or more questions based on query
      parameters:
      - name: Authorization
        in: path
        description: JWT token containing the user ID.  
        required: true
        schema:
          type: string
      - name: questionId
        in: query
        description: A question _id as a filter for questions.  If empty, all questions will be retrieved.  Multiple questionIds will be treated as 'or'
        required: false
        schema:
          type: string
      - name: topic
        in: query
        description: One or more topics to use as a filter for questions.  Multiple comma-separated topics in one parameter will be treated as 'and', and multiple topic parameters will be treated as or.  Thus, topic=a,b&topic=c is understood to be topic = (a&b) | c.
        required: false
        schema:
          type: string
      - name: depth
        in: query
        description: 0 = no nesting, 1 = 1st order nesting, etc.  -1 for all levels.
        required: false
        schema:
          type: integer
      - name: start
        in: query
        description: Use for pagination.  The first record to retrieve.  default is 0.  If start is provided, length must also be provided or an error
        required: false
        schema:
          type: integer
      - name: length
        in: query
        description: Use for pagination.  The maximum number of records to return. If length is provided, start must also be provided.
        required: false
        schema:
          type: integer

      operationId: getQuestions    
      responses:
        200:
          description: A list of questions for a space
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'

                  

    post:
      summary: post a question 
      description: Adds a new question to a space.
      parameters: 
      - name: Authorization
        in: path
        description: JWT token containing the user ID.  
        required: true
        schema:
          type: string
      operationId: postQuestion
      requestBody:
        description: Question to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewQuestion'
      responses:
        200:
          description: question posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        400:
          description: invalid format, for example, bad ObjectId or incorrect schema
          content:
            text/plain:
              schema:
                type: string
        401:
          description: Invalid JWT token
          content:
            text/plain:
              schema:
                type: string  
        404:
          description: questionId is not found
          content:
            text/plain:
              schema:
                type: string

    put:
      summary: update a question 
      parameters:
      - name: Authorization
        in: path
        description: JWT token containing the user ID.  
        required: true
        schema:
          type: string
      - name: questionId
        in: query
        description: The _id of question to update
        required: true
        schema:
          type: string

      description: Updated question.
      operationId: putQuestionUpdate
      requestBody:
        description: Quesdtion Update 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateObject'
              
      responses:
        200:
          description: Update has been applied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
        400:
          description: invalid format, for example, bad ObjectId or incorrect schema
          content:
            text/plain:
              schema:
                type: string
        401: 
          description: Invalid JWT token
          content:
            text/plain:
              schema:
                type: string  
        404:
          description: commentId is not found
          content:
            text/plain:
              schema:
                type: string



  /answers:
    get:
      summary: Gets one or more answers
      parameters:
      - name: Authorization
        in: path
        description: JWT token containing the user ID.  
        required: true
        schema:
          type: string
      - name: questionId
        in: query
        description: one or more (coma-separated) question _id.  If set, only answers from specified questioId(s) will be returned
        required: true
        schema:
          type: string
      - name: answerId
        in: query
        description: One or more (comma-separated) answer _id as a filter for answers, for each question to get.  If empty, all answers will be retrieved, based on the value if questionId
        required: false
        schema:
          type: string
      - name: depth
        in: query
        description: 0 = no nesting, 1 = 1st order nesting, etc.  -1 for all levels.
        required: false
        schema:
          type: integer
      operationId: getAnswer
      responses:
        200:
          description: A list of answers for a question
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Answer'
        401:
          description: Invalid JWT token
          content:
            text/plain:
              schema:
                type: string  
    post:
      summary: post an answer to a question
      parameters:
      - name: Authorization
        in: path
        description: JWT token containing the user ID.  
        required: true
        schema:
          type: string
      - name: questionid
        in: query
        description: The question to be answered
        required: true
        schema:
          type: string

      description: Answers a question.
      operationId: postAnswer
      requestBody:
        description: Answer to question
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAnswer'
      responses:
        200:
          description: answer posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
        400:
          description: invalid format, for example, bad ObjectId or incorrect schema
          content:
            text/plain:
              schema:
                type: string
        401:
          description: Invalid JWT token
          content:
            text/plain:
              schema:
                type: string  
        404:
          description: questionId is not found
          content:
            text/plain:
              schema:
                type: string
    put:
      summary: update an answer 
      parameters:
      - name: Authorization
        in: path
        description: JWT token containing the user ID.  
        required: true
        schema:
          type: string
      - name: answerId
        in: query
        description: The _id of answer to update
        required: true
        schema:
          type: string

      description: Updated answer.
      operationId: putAnswerUpdate
      requestBody:
        description: Answer udpate text 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateObject'
              
      responses:
        200:
          description: Update has been applied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
        400:
          description: invalid format, for example, bad ObjectId or incorrect schema
          content:
            text/plain:
              schema:
                type: string
        401:
          description: Invalid JWT token
          content:
            text/plain:
              schema:
                type: string  
        404:
          description: commentId is not found
          content:
            text/plain:
              schema:
                type: string

  /comments:
    get:
      summary: Gets all top-level comments for an answer
      parameters:
      - name: Authorization
        in: path
        description: JWT token containing the user ID.  
        required: true
        schema:
          type: string
      - name: answerId
        in: query
        description: one or more (coma-separated) answer _id.  If set, only comments from specified answer(s) will be returned
        required: true
        schema:
          type: string
      - name: commentId
        in: query
        description: One or more (comma-separated) comment _id as a filter for comments to get.  If empty, all commments will be retrieved, based on the value of answerId
        required: false
        schema:
          type: string
      - name: depth
        in: query
        description: 0 = no nesting, 1 = 1st order nesting, etc.  -1 for all levels.
        required: false
        schema:
          type: integer
      operationId: getComments
      responses:
        200:
          description: A list of comments for an answer
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        401:
          description: Invalid JWT token
          content:
            text/plain:
              schema:
                type: string  
                  
    post:
      summary: post a comment to an answer
      parameters:
      - name: Authorization
        in: path
        description: JWT token containing the user ID.  
        required: true
        schema:
          type: string
      - name: answerId
        in: query
        description: The _id of answer for comment
        required: false
        schema:
          type: string

      description: Comment for an answer.
      operationId: postComment
      requestBody:
        description: Comment 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewComment'
      responses:
        200:
          description: comment posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        400:
          description: invalid format, for example, bad ObjectId or incorrect schema
          content:
            text/plain:
              schema:
                type: string
        401:
          description: Invalid JWT token
          content:
            text/plain:
              schema:
                type: string  
        404:
          description: answerId is not found
          content:
            text/plain:
              schema:
                type: string
  
    put:
      summary: update a comment or reply
      parameters:
      - name: Authorization
        in: path
        description: JWT token containing the user ID.  
        required: true
        schema:
          type: string
      - name: commentId
        in: query
        description: The _id of comment to update
        required: true
        schema:
          type: string

      description: Reply for a comment.
      operationId: putCommentUpdate
      requestBody:
        description: Comment update text 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateObject'
              
      responses:
        200:
          description: Update has been applied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        400:
          description: invalid format, for example, bad ObjectId or incorrect schema
          content:
            text/plain:
              schema:
                type: string
        401:
          description: Invalid JWT token
          content:
            text/plain:
              schema:
                type: string  
        404:
          description: commentId is not found
          content:
            text/plain:
              schema:
                type: string

                
  /reply:
    post:
      summary: post a reply to a comment
      parameters:
      - name: Authorization
        in: path
        description: JWT token containing the user ID.  
        required: true
        schema:
          type: string
      - name: commentId
        in: query
        description: The _id of comment for reply
        required: true
        schema:
          type: string

      description: Reply for a comment.
      operationId: postReply
      requestBody:
        description: reply 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewComment'
      responses:
        200:
          description: reply posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        400:
          description: invalid format, for example, bad ObjectId or incorrect schema
          content:
            text/plain:
              schema:
                type: string
        401:
          description: Invalid JWT token
          content:
            text/plain:
              schema:
                type: string  
        404:
          description: commentId is not found
          content:
            text/plain:
              schema:
                type: string

components:
  schemas:
  
    Topic:
      required:
      - "topic"
      properties:
        label:
          type: "string"

          
    Question:
      required:
      - _id
      - questionText
      - createdBy
      - createdOn
      type: object
      properties:
        _id:
          type: string
        questionText:
          type: string
        createdOn:
          type: string
          format: date-time
        topics:
          type: array
          items:
              $ref: '#/components/schemas/Topic'

        answers:
          type: array
          items:

                $ref: '#/components/schemas/Answer'
    NewQuestion:
      required:
      - questionText
      properties:
        questionText:
          type: string
        topics:
          type: array
          items:
              $ref: '#/components/schemas/Topic'
        

    Answer:
      required:
      - _id
      - answerText
      - createdBy
      - createdOn
      type: object
      properties:
        _id:
          type: string
        questionId:
          type: string
        answerText:
          type: string
        createdOn:
          type: string
          format: date-time
        comments:
          type: array
          items:
            required:
            - comments
            type: object
            properties:
              replies:
                $ref: '#/components/schemas/Comment'
    NewAnswer:
      required:
      - body
      properties:
        answerText:
          type: string
                
    Comment:
      required:
      - _id
      - answerId
      - commentText
      - createdBy
      - createdOn
      type: object
      properties:
        _id:
          type: string
        answerId:
          type: string
        parentCommentId:
          type: string
          description: The parent comment is for comment trees.  For first-gen comment,
            the parent is answer, and there is no parent comment.
        commentText:
          type: string
        createdOn:
          type: string
          format: date-time
        replies:
          type: array
          items:
            required:
            - replies
            type: object
            properties:
              replies:
                $ref: '#/components/schemas/Comment'

    NewComment:
      required:
      - questionText
      properties:
        commentTex:
          type: string
                
    UpdateObject:
      required:
      - body
      type: object
      properties:
        body:
          type: string
