/*
 * Cloud Walkers Message API
 *
 * Post/read questions, answers, and comments
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package main

import (
	"encoding/json"
	"log"
	"net/http"
	"strings"
)

func SpacesGet(w http.ResponseWriter, r *http.Request) {
	pp := parseUrl(r.URL)
	spaces := getSpaces(depth(pp))
	jsonVal, err := json.MarshalIndent(spaces, "", "   ");

	if(err != nil){
		log.Fatal(err);
	}
	w.Header().Set("Content-Type","application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(jsonVal);
}


func SpaceSpaceIdGet(w http.ResponseWriter, r *http.Request) {
	pp := parseUrl(r.URL)
	id := getPath(pp)
	space := getSpace(id, depth(pp))
	jsonVal, err := json.MarshalIndent(space, "", "   ");

	if(err != nil){
		log.Fatal(err);
	}
	w.Header().Set("Content-Type","application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(jsonVal);}

func QuestionQuestionIdGet(w http.ResponseWriter, r *http.Request) {
	pp := parseUrl(r.URL)
	id := getPath(pp)
	question := getQuestion(id, depth(pp))
	jsonVal, err := json.MarshalIndent(question, "", "   ");

	if(err != nil){
		log.Fatal(err);
	}
	w.Header().Set("Content-Type","application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(jsonVal);
}

func QuestionsSpaceIdGet(w http.ResponseWriter, r *http.Request) {
	pp := parseUrl(r.URL)
	id := getPath(pp)
	questions := getQuestions(id, depth(pp))
	jsonVal, err := json.MarshalIndent(questions, "", "   ");

	if(err != nil){
		log.Fatal(err);
	}
	w.Header().Set("Content-Type","application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(jsonVal);
}

func ObjectidsGet (w http.ResponseWriter, r *http.Request) {
	pp := parseUrl(r.URL)
	id := getPath(pp)

	var ids []string

	if (strings.HasPrefix(id, "spaces")) {
		ids = append(ids, "spaces")
	} else if(strings.HasPrefix(id, "questions")){
		ids = append(ids, "questions")
		ids = append(ids, strings.TrimPrefix(id, "questions/"))
	} else if(strings.HasPrefix(id, "answers")){
		ids = append(ids, "answers")
		ids = append(ids, strings.TrimPrefix(id, "answers/"))
	}else{
		ids = append(ids, "")
	}

	jsonVal, err := json.MarshalIndent(getObjectIds(ids), "", "   ");
	if (err != nil) {
		log.Fatal(err);
	}
	w.Header().Set("Content-Type","application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(jsonVal);

}

// AnswerAnswerIdGet - Gets one answer
func AnswerAnswerIdGet(w http.ResponseWriter, r *http.Request) {
	pp := parseUrl(r.URL)
	id := getPath(pp)
	answer := getAnswer(id, depth(pp))
	jsonVal, err := json.MarshalIndent(answer, "", "   ");

	if(err != nil){
		log.Fatal(err);
	}
	w.Header().Set("Content-Type","application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(jsonVal);
}

// AnswersQuestionIdGet - Gets all answers for a question
func AnswersQuestionIdGet(w http.ResponseWriter, r *http.Request) {
	pp := parseUrl(r.URL)
	id := getPath(pp)
	answers := getAnswers(id, depth(pp))
	jsonVal, err := json.MarshalIndent(answers, "", "   ");

	if(err != nil){
		log.Fatal(err);
	}
	w.Header().Set("Content-Type","application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(jsonVal);
}


// CommentCommentIdGet - Gets one answer
func CommentCommentIdGet(w http.ResponseWriter, r *http.Request) {

	pp := parseUrl(r.URL)

	comments := getComment(pp.pathItems[len(pp.pathItems) - 1], depth(pp))
	jsonVal, err := json.MarshalIndent(comments, "", "   ");

	if(err != nil){
		log.Fatal(err);
	}
	w.Header().Set("Content-Type","application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(jsonVal);
}

// CommentsAnswerIdGet - Gets all top-level comments for an answer
func CommentsAnswerIdGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	pp := parseUrl(r.URL)
	id := getPath(pp)
	comments := getCommentsForAnswer(id, depth(pp))
	jsonVal, err := json.MarshalIndent(comments, "", "   ");

	if(err != nil){
		log.Fatal(err);
	}
	w.Header().Set("Content-Type","application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(jsonVal);
}

